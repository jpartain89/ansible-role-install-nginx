---

- name: Include Ubuntu Vars
  include_vars: ubuntu.yml
  when: ansible_facts['distribution'] == "Ubuntu"

- name: Include Debian Vars
  include_vars: debian.yml
  when: ansible_facts['os_family'] == "Debian"

- name: Create NGINX Group
  group:
    name: nginx
    state: present
    system: yes

- name: Create NGINX Users
  user:
    name: nginx
    group: nginx
    system: yes
    state: present
    groups: "{{ item }}"
  with_items:
    - "{{ nginx_users_groups | default(omit) }}"

- name: Check Versions
  include_tasks: check_version.yml
  when: nginx_check_version == true

- name: Assign NGINX Version locally
  command: "echo {{ nginx_version }}"
  register: _nginx_local_version
  delegate_to: localhost

- name: Add Backports apt repo for CheckInstall
  apt_repository:
    repo: "deb http://deb.debian.org/debian buster-backports main contrib non-free"
    state: present
  become: true
  when:
    - ansible_facts['distribution_release'] == "buster"
    - ansible_facts['lsb']['id']  != "Raspbian"

- name: Create Master tmp Directory
  file:
    path: /tmp/nginx
    owner: "{{ ansible_user_uid | int }}"
    group: "{{ ansible_user_gid | int }}"
    state: directory
    mode: 0775
  become: true

- name: Create Master tmp Directory | Localhost
  file:
    path: /tmp/nginx
    owner: "{{ ansible_user_uid | int }}"
    group: "{{ ansible_user_gid | int }}"
    state: directory
    mode: 0775
  delegate_to: localhost
  become: true

- name: Installing sury.org's apt repo
  script: "files/sury_php.sh"
  args:
    executable: bash
    creates: /etc/apt/sources.list.d/php.list
  become: true
  when: ansible_facts['distribution'] == "Debian"

- name: Installing sury.org's ppa
  ansible.builtin.apt_repository:
    repo: ppa:ondrej/php
  when: ansible_facts['distribution'] == "Ubuntu"

- name: Install Required PreRequisites - apt
  apt:
    name: "{{ nginx_prerequisites }}" 
    state: present
    update_cache: yes
    cache_valid_time: 32400
  become: true
  failed_when: false

- name: Install Extra PreRequisites
  apt:
    name: "{{ nginx_extra_prerequisites }}"
    state: present
    update_cache: yes
    cache_valid_time: 32400
  become: true
  failed_when: false

- name: Confirm /etc/nginx Exists
  stat:
    path: /etc/nginx
  register: _nginx_config
  become: true

- name: Move Existing NGINX Config Directory
  command: 'mv /etc/nginx /etc/nginx.bak'
  register: _nginx_move
  when:
    - _nginx_config.stat.exists
    - not _nginx_config.stat.islnk
  become: true
  failed_when: false

- name: Remove NGINX Config Link
  file:
    path: "/etc/nginx"
    state: absent
  become: true
  when:
    - _nginx_config.stat.exists
    - _nginx_config.stat.islnk

- name: Create NGINX Directories
  file:
    path: "{{ item }}"
    owner: "{{ nginx_user }}"
    group: "{{ nginx_group }}"
    state: directory
    mode: 0775
  with_items:
    - "{{ nginx_directories }}"
  become: true

- name: Test if PCRE is Installed
  command: 'dpkg -l pcre'
  args:
    warn: no
  register: _pcre_installed
  failed_when: _pcre_installed.rc > 1
  changed_when: no
  become: true

- name: Run PCRE Steps
  include_tasks: pcre.yml
  when: _pcre_installed.rc != 0

- name: Test if ZLIB is Installed
  command: 'dpkg -l zlib'
  args:
    warn: no
  register: _zlib_installed
  failed_when: _zlib_installed.rc > 1
  changed_when: no
  become: true

- name: Run ZLIB Steps
  include_tasks: zlib.yml
  when: _zlib_installed.rc != 0

- name: Test if OpenSSL is Installed
  command: 'dpkg -l openssl'
  args:
    warn: no
  register: _openssl_installed
  failed_when: _openssl_installed.rc > 1
  changed_when: no
  become: true

- name: Run OpenSSL Steps
  include_tasks: openssl.yml
  when: _openssl_installed.rc != 0

- name: Git Clone Any Additional Modules
  git: # noqa 401
    repo: "{{ item.address }}"
    dest: "/tmp/nginx/{{ item.name }}"
    clone: yes
    update: yes
    recursive: yes
  with_items:
    - "{{ nginx_module }}"
    - "{{ nginx_module_nginx }}"
    - "{{ nginx_dynamic_module }}"
  failed_when: false
  become: true

- name: Run NGINX Steps
  include_tasks: nginx.yml

- name: Move NGINX Config Directory Back
  command: 'mv /etc/nginx.bak /etc/nginx'
  when:
    - _nginx_config.stat.exists
    - not _nginx_config.stat.islnk
  become: true
  failed_when: false

- name: ReLink NGINX
  file:
    src: "{{ nginx_config_loc }}"
    dest: /etc/nginx
    state: link
    owner: "{{ nginx_user }}"
    group: "{{ nginx_group }}"
  become: true
  when:
    - _nginx_config.stat.exists
    - _nginx_config.stat.islnk
  failed_when: false

- name: Test if nginx.service exists
  shell: "systemctl status nginx.service -q"
  register: _nginx_systemctl
  become: true
  failed_when: false

- name: Create nginx.service
  template:
    src: nginx.service.j2
    dest: "/etc/systemd/system/nginx.service"
    mode: 0750
  become: true
  when: _nginx_systemctl.rc != 0

- name: Register nginx.service
  systemd:
    masked: no
    state: started
    name: nginx.service
    enabled: true
    daemon_reload: true
  become: true
  when: _nginx_systemctl.rc != 0
