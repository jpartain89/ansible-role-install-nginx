---

- name: Include Ubuntu Vars
  ansible.builtin.include_vars: ubuntu.yml
  when: ansible_facts['distribution'] == "Ubuntu"

- name: Include Debian Vars
  ansible.builtin.include_vars: debian.yml
  when: ansible_facts['os_family'] == "Debian"

- name: Create NGINX Group
  ansible.builtin.group:
    name: nginx
    state: present
    system: true

- name: Create NGINX Users
  ansible.builtin.user:
    name: nginx
    group: nginx
    system: true
    state: present
    groups: "{{ item }}"
  with_items:
    - "{{ nginx_users_groups }}"
  become: true

- name: Check Versions
  ansible.builtin.include_tasks: check_version.yml
<<<<<<< HEAD
  when: nginx_check_version == "true"
=======
  when: nginx_check_version is true
>>>>>>> 971d87c74c3fff8d3efd64d99b4d73551de5fca7

- name: Add Backports apt repo for CheckInstall
  ansible.builtin.apt_repository:
    repo: "deb http://deb.debian.org/debian buster-backports main contrib falsen-free"
    state: present
  become: true
  when:
    - ansible_facts['distribution_release'] == "buster"
    - ansible_facts['lsb']['id'] != "Raspbian"

- name: Create Master tmp Directory
  ansible.builtin.file:
    path: /tmp/nginx
    owner: "{{ ansible_user_uid | int }}"
    group: "{{ ansible_user_gid | int }}"
    state: directory
    mode: "0775"
  become: true

- name: Create Master tmp Directory | Localhost
  ansible.builtin.file:
    path: /tmp/nginx
    owner: "{{ ansible_user_uid | int }}"
    group: "{{ ansible_user_gid | int }}"
    state: directory
    mode: "0775"
  delegate_to: localhost
  become: true

- name: Install Required PreRequisites - apt
  ansible.builtin.apt:
    name: "{{ nginx_prerequisites }}"
    state: present
    update_cache: true
    cache_valid_time: 32400
  become: true
  failed_when: false

<<<<<<< HEAD
- name: Install Any Extra Programs Needed
  ansible.builtin.apt:
    name: "{{ item }}"
    state: present
    update_cache: true
    cache_valid_time: 32400
  become: true
  failed_when: false
  loop: nginx_extra_prerequisites

=======
>>>>>>> 971d87c74c3fff8d3efd64d99b4d73551de5fca7
- name: Confirm /etc/nginx Exists
  ansible.builtin.stat:
    path: /etc/nginx
  register: _nginx_config
  become: true

- name: Move Existing NGINX Config Directory
  ansible.builtin.copy:
    remote_src: true
    src: /etc/nginx
    dest: /etc/nginx.old
    mode: "0775"
  register: _nginx_move
  when:
    - _nginx_config.stat.exists
  become: true
  failed_when: false

- name: Remove NGINX Config Link
  ansible.builtin.file:
    path: "/etc/nginx"
    state: absent
  become: true
  when:
    - _nginx_config.stat.exists

- name: Create NGINX Directories
  ansible.builtin.file:
    path: "{{ item }}"
    owner: "{{ nginx_user }}"
    group: "{{ nginx_group }}"
    state: directory
    mode: "0775"
  with_items:
    - "{{ nginx_directories }}"
  become: true

- name: Grab Current PCRE Version
  ansible.builtin.command: 'pcre-config --version'
  register: _pcre_installed_vers_num
  failed_when: false
  changed_when: false

- name: Combine Version and name
  ansible.builtin.command: 'echo "pcre-{{ _pcre_installed_vers_num.stdout | default(0.0.0) }}"'
  register: _pcre_installed_combined

- name: Show pcre var
  ansible.builtin.debug:
    var: _pcre_installed_vers_num.stdout

- name: Show pcre combined var
  ansible.builtin.debug:
    var: _pcre_installed_combined.stdout

- name: Run PCRE Steps
  ansible.builtin.include_tasks: pcre.yml
  when: _pcre_installed_combined.stdout != pcre_version

- name: Test if ZLIB is Installed
  ansible.builtin.command: 'dpkg -l zlib'
  register: _zlib_installed
  failed_when: false
  changed_when: false
  become: true

- name: Run ZLIB Steps
  ansible.builtin.include_tasks: zlib.yml
  when: _zlib_installed.rc != 0

- name: Test if OpenSSL is Installed
  ansible.builtin.command: "openssl version | awk '{print $2}'"
  register: _openssl_installed
  failed_when: false
  changed_when: false

- name: Combine Version and Name
  ansible.builtin.command: 'echo "openssl-{{ _openssl_installed.stdout | default(1.0.0) }}"'
  register: _openssl_installed_combined

# w- name: Run OpenSSL Steps
#  ansible.builtin.include_tasks: openssl.yml
#  when: _openssl_installed_combined != openssl_version

- name: Git Clone Any Additional Static Modules
  ansible.builtin.git: # noqa 401
    repo: "{{ item.address }}"
    dest: "/tmp/nginx/{{ item.name }}"
    clone: true
    update: true
    recursive: true
  with_items:
    - "{{ nginx_module }}"
    - "{{ nginx_module_nginx }}"
  failed_when: false
  become: true

- name: Run NGINX Steps
  ansible.builtin.include_tasks: nginx.yml

- name: Move NGINX Config Directory Back
  ansible.builtin.command: 'mv /etc/nginx.bak /etc/nginx'
  when:
    - _nginx_config.stat.exists
    - _nginx_config.stat.islnk is false
  become: true
  failed_when: false

- name: ReLink NGINX
  ansible.builtin.file:
    src: "{{ nginx_config_loc }}"
    dest: /etc/nginx
    state: link
    owner: "{{ nginx_user }}"
    group: "{{ nginx_group }}"
  become: true
  when:
    - _nginx_config.stat.exists
    - _nginx_config.stat.islnk
  failed_when: false
